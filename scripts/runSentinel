#!/bin/bash
echo Running runSentinel \(extra arguments are \'$@\'\)

# script that is called by the phpRootRunSentinel (from the www server) and crontabRunSentinel
# it resets to the latest git commits, executes the Haskell sentinel and stores its output in SentinelOutput.txt and logs/

# has absolute paths instead of $HOME
# NOTE: make sure that www directory of SentinelOutput is writable for 'other'

HOME="/home/sentinel"
LANG=en_US.UTF-8
PATH=/home/sentinel/git/sentinel/scripts:/home/sentinel/.cabal/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games

export HOME
export LANG
export PATH

sentinelOut=/home/sentinel/git/sentinel/www/logs/SentinelOutput.txt

# get timestamp at the start of sentinel execution
Timestamp=`date +%Y-%m-%d_%H.%M.%S`
echo "Script runSentinel started at $Timestamp"$'\n' > $sentinelOut


rm -rf /home/sentinel/git/ampersand/dist
rm -rf /home/sentinel/git/prototype/dist

# force latest version of ampersand and prototype without risking merge problems (reset leaves ignored build directories intact)
git fetch
cd /home/sentinel/git/ampersand
git reset --hard
cd /home/sentinel/git/prototype
git reset --hard


# Check for --deleteSandbox argument
deleteSandbox=0
for var in "$@"
do
  if [ $var == "--deleteSandbox" ]; then
    deleteSandbox=1
  fi
done

# get git commit information

# with html links, for sentinel output page
function getGitInfoHtml {
  cd /home/sentinel/git/$1
  sha=`git rev-parse --short HEAD`
  echo `git rev-parse --abbrev-ref HEAD`:"<a href=\"https://github.com/AmpersandTarski/$1/commit/$sha\">$sha</a>"
}

# for filename
function getGitInfo {
  cd /home/sentinel/git/$1
  echo `git rev-parse --abbrev-ref HEAD`:`git rev-parse --short HEAD`
}

AmpersandGitInfo=`getGitInfo ampersand`
PrototypeGitInfo=`getGitInfo prototype`
SentinelGitInfo=`getGitInfo sentinel`

AmpersandGitInfoHtml=`getGitInfoHtml ampersand`
PrototypeGitInfoHtml=`getGitInfoHtml prototype`
SentinelGitInfoHtml=`getGitInfoHtml sentinel`

echo "Git info: Ampersand[$AmpersandGitInfoHtml], Prototype[$PrototypeGitInfoHtml], Sentinel[$SentinelGitInfoHtml]"$'\n' >> $sentinelOut


# Init sandboxes (and delete Ampersand sandbox, if necessary)

cd /home/sentinel/git/ampersand
echo $'Performing cabal update\n' >> $sentinelOut
#cabal update
# init is neutral if sandbox already exists
cabal sandbox init
if [ $deleteSandbox -ne 0 ]; then
echo $'Deleting Ampersand sandbox and reinstalling all dependencies. This may take a while. (check progress on <a href=\"http://sentinel.tarski.nl/logs/runSentinel.log.txt\">runSentinel.log.txt</a>)\n' >> $sentinelOut
cabal sandbox delete
cabal sandbox init
cabal install --only-dependencies
fi
cd /home/sentinel/git/prototype
cabal sandbox init --sandbox=../Ampersand/.cabal-sandbox


# execute Sentinel with extra arguments passed to this script ($@)
/home/sentinel/.cabal/bin/sentinel --html $@ < /dev/null >> $sentinelOut 2>&1

# Rather hacky way to extract some numbers from the test results (shows empty strings when tests did not finish properly)
# take the 5th field using space as separator
NrOfFailed=`grep "Number of failed tests:" $sentinelOut | cut -d" " -f5`
# take the 5th field using space as separator
NrOfTests=`grep "Total number of tests:" $sentinelOut | cut -d" " -f5`

# if NrOfFailed is empty then testing was aborted
if [ -z "$NrOfFailed" ]; then
Results=Aborted
else
Results=${NrOfFailed}_of_${NrOfTests}
fi

Filename=Sentinel_${Timestamp}__${Results}__Amp=${AmpersandGitInfo}_Pro=${PrototypeGitInfo}_Sen=${SentinelGitInfo}.html
# first '=' is assignment, the others are part of the filename

# put a </br> at the end of each line and store in logs directory
sed 's/$/<\/br>/' $sentinelOut > /home/sentinel/git/sentinel/www/logs/$Filename
